Implementation Of OOPS Concepts
As we know the basic definition of the OOPS principles, we will now focus on how these concepts are implemented in your Selenium Testing and what are the potential examples of OOPS in Selenium.

#1) Inheritance

In a typical Page Object Model, we create a Base Class where we initialize WebDriver interface, Data Source, Excel Reader, Property File or Config File, WebDriver waits and so on. We extend the Base Class in our Test Class and Utility Class.

We do it by using the extends keyword and achieve the Inheritance. This facilitates the reusability of the class and we don’t have to write the same initialization code over and over again. This not only promotes reusability but it also shortens the code that improves the Time and Space Complexity of your suite.

#2) Encapsulation

In a POM Project, we know that we create a separate class for every page. All these classes are the best examples of Encapsulation where we keep the data of a class separated from the other class.

In these POM Classes, we declare the data members using @FindBy and initialize them using a constructor with initElement() to utilize them in the test methods.

#3) Polymorphism

Polymorphism relies on the concept of one interface supporting multiple methods. As we know, WebDriver is an interface that supports multiple methods of different browsers like ChromeDriver(), IEDriver(), SafariDriver() and FirefoxDriver().

Hence the following line of codes will work to instantiate the browsers in two different ways.

Using WebDriver Interface

WebDriver driver = new ChromeDriver();

Here, we are using WebDriver Interface to instantiate the Chrome Browser.

This WebDriver interface supports all the methods that are there in the ChromeDriver class and the same can be rewritten for Firefox browsers which support methods of the FirefoxDriver class.

WebDriver driver = new FirefoxDriver();

Without Using WebDriver Interface

ChromeDriver driver = new ChromeDriver();

Here, we are creating a reference for the ChromeDriver class and it will only support the methods that are there in the ChromeDriver class.

Method Overloading In Selenium
Methods Overloading is a process of using the two methods in the same class with the same name and different parameters.

For Example,

Testing(int a, char b)
Testing(char b)

Now in Selenium, we all use Implicit Wait to make the page wait for some specified time interval.

This is the best example of Method Overloading as we can provide different Timestamp or TimeUnit like SECONDS, MINUTES, etc.

Method Overriding In Selenium
Method overriding is a process where a method in the child class has the same name and the same parameters as that of the method in its base class.

When we talk about the child class and the base class, we assume that both the classes are in an “is-a” relationship which is nothing but the inheritance.

Examples of Method Overriding
In the WebDriver interface, we use two different methods for navigating or accessing any website i.e. driver.get() and driver.navigate().to().


These two methods are examples of Method Overriding.

Enlisted below is the basic difference between the navigate() and get() method and this is frequently asked in Selenium Interviews.

get() method will wait till the page is completely loaded in the browser while navigate() would not.
navigate() method essentially returns a Navigate Interface which allows a user to traverse back, forward, or refresh pages as you would do in an actual browser window, while this functionality is not possible with the get() method
